//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Shippo.Models.Components
{
    using Newtonsoft.Json;
    using Shippo.Utils;
    using System;
    
    /// <summary>
    /// Where your parcels will be available for pickup. &quot;Security Deck&quot; and &quot;Shipping Dock&quot; are only <br/>
    /// 
    /// <remarks>
    /// supported for DHL Express.
    /// </remarks>
    /// </summary>
    public enum BuildingLocationType
    {
        [JsonProperty("Back Door")]
        BackDoor,
        [JsonProperty("Ring Bell")]
        RingBell,
        [JsonProperty("Security Deck")]
        SecurityDeck,
        [JsonProperty("Shipping Dock")]
        ShippingDock,
        [JsonProperty("Front Door")]
        FrontDoor,
        [JsonProperty("Knock on Door")]
        KnockOnDoor,
        [JsonProperty("In/At Mailbox")]
        InAtMailbox,
        [JsonProperty("Mail Room")]
        MailRoom,
        [JsonProperty("Office")]
        Office,
        [JsonProperty("Other")]
        Other,
        [JsonProperty("Reception")]
        Reception,
        [JsonProperty("Side Door")]
        SideDoor,
    }

    public static class BuildingLocationTypeExtension
    {
        public static string Value(this BuildingLocationType value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static BuildingLocationType ToEnum(this string value)
        {
            foreach(var field in typeof(BuildingLocationType).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is BuildingLocationType)
                    {
                        return (BuildingLocationType)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum BuildingLocationType");
        }
    }

}