//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Shippo.Models.Components
{
    using Newtonsoft.Json;
    using Shippo.Utils;
    using System;
    
    /// <summary>
    /// Dangerous Goods Code (DHL eCommerce only). See &lt;a href=&quot;https://api-legacy.dhlecs.com/docs/v2/appendix.html#dangerous-goods&quot;&gt;Category Codes&lt;/a&gt;
    /// </summary>
    public enum DangerousGoodsCode
    {
        [JsonProperty("01")]
        One,
        [JsonProperty("02")]
        Two,
        [JsonProperty("03")]
        Three,
        [JsonProperty("04")]
        Four,
        [JsonProperty("05")]
        Five,
        [JsonProperty("06")]
        Six,
        [JsonProperty("07")]
        Seven,
        [JsonProperty("08")]
        Eight,
        [JsonProperty("09")]
        Nine,
    }

    public static class DangerousGoodsCodeExtension
    {
        public static string Value(this DangerousGoodsCode value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static DangerousGoodsCode ToEnum(this string value)
        {
            foreach(var field in typeof(DangerousGoodsCode).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is DangerousGoodsCode)
                    {
                        return (DangerousGoodsCode)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum DangerousGoodsCode");
        }
    }

}