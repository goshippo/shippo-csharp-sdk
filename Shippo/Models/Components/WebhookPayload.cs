//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Shippo.Models.Components
{
    using Newtonsoft.Json.Linq;
    using Newtonsoft.Json;
    using Shippo.Models.Components;
    using Shippo.Utils;
    using System.Collections.Generic;
    using System.Numerics;
    using System.Reflection;
    using System;
    

    public class WebhookPayloadType
    {
        private WebhookPayloadType(string value) { Value = value; }

        public string Value { get; private set; }
        
        public static WebhookPayloadType TrackUpdated { get { return new WebhookPayloadType("track_updated"); } }
        public static WebhookPayloadType BatchCreated { get { return new WebhookPayloadType("batch_created"); } }
        public static WebhookPayloadType BatchPurchased { get { return new WebhookPayloadType("batch_purchased"); } }
        public static WebhookPayloadType TransactionCreated { get { return new WebhookPayloadType("transaction_created"); } }
        public static WebhookPayloadType TransactionUpdated { get { return new WebhookPayloadType("transaction_updated"); } }
        public static WebhookPayloadType Null { get { return new WebhookPayloadType("null"); } }

        public override string ToString() { return Value; }
        public static implicit operator String(WebhookPayloadType v) { return v.Value; }
        public static WebhookPayloadType FromString(string v) {
            switch(v) {
                case "track_updated": return TrackUpdated;
                case "batch_created": return BatchCreated;
                case "batch_purchased": return BatchPurchased;
                case "transaction_created": return TransactionCreated;
                case "transaction_updated": return TransactionUpdated;
                case "null": return Null;
                default: throw new ArgumentException("Invalid value for WebhookPayloadType");
            }
        }
        public override bool Equals(object? obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            return Value.Equals(((WebhookPayloadType)obj).Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
    }
    

    [JsonConverter(typeof(WebhookPayload.WebhookPayloadConverter))]
    public class WebhookPayload {
        public WebhookPayload(WebhookPayloadType type) {
            Type = type;
        }
        public WebhookPayloadWebhookPayloadTrack? WebhookPayloadWebhookPayloadTrack { get; set; } 
        public WebhookPayloadWebhookPayloadBatch? WebhookPayloadWebhookPayloadBatch { get; set; } 
        public WebhookPayloadWebhookPayloadTransaction? WebhookPayloadWebhookPayloadTransaction { get; set; } 

        public WebhookPayloadType Type { get; set; }


        public static WebhookPayload CreateTrackUpdated(WebhookPayloadWebhookPayloadTrack trackUpdated) {
            WebhookPayloadType typ = WebhookPayloadType.TrackUpdated;
        
            string typStr = WebhookPayloadType.TrackUpdated.ToString();
            
            trackUpdated.Event = WebhookEventTypeEnumExtension.ToEnum(WebhookPayloadType.TrackUpdated.ToString());
            WebhookPayload res = new WebhookPayload(typ);
            res.WebhookPayloadWebhookPayloadTrack = trackUpdated;
            return res;
        }
        public static WebhookPayload CreateBatchCreated(WebhookPayloadWebhookPayloadBatch batchCreated) {
            WebhookPayloadType typ = WebhookPayloadType.BatchCreated;
        
            string typStr = WebhookPayloadType.BatchCreated.ToString();
            
            batchCreated.Event = WebhookEventTypeEnumExtension.ToEnum(WebhookPayloadType.BatchCreated.ToString());
            WebhookPayload res = new WebhookPayload(typ);
            res.WebhookPayloadWebhookPayloadBatch = batchCreated;
            return res;
        }
        public static WebhookPayload CreateBatchPurchased(WebhookPayloadWebhookPayloadBatch batchPurchased) {
            WebhookPayloadType typ = WebhookPayloadType.BatchPurchased;
        
            string typStr = WebhookPayloadType.BatchPurchased.ToString();
            
            batchPurchased.Event = WebhookEventTypeEnumExtension.ToEnum(WebhookPayloadType.BatchPurchased.ToString());
            WebhookPayload res = new WebhookPayload(typ);
            res.WebhookPayloadWebhookPayloadBatch = batchPurchased;
            return res;
        }
        public static WebhookPayload CreateTransactionCreated(WebhookPayloadWebhookPayloadTransaction transactionCreated) {
            WebhookPayloadType typ = WebhookPayloadType.TransactionCreated;
        
            string typStr = WebhookPayloadType.TransactionCreated.ToString();
            
            transactionCreated.Event = WebhookEventTypeEnumExtension.ToEnum(WebhookPayloadType.TransactionCreated.ToString());
            WebhookPayload res = new WebhookPayload(typ);
            res.WebhookPayloadWebhookPayloadTransaction = transactionCreated;
            return res;
        }
        public static WebhookPayload CreateTransactionUpdated(WebhookPayloadWebhookPayloadTransaction transactionUpdated) {
            WebhookPayloadType typ = WebhookPayloadType.TransactionUpdated;
        
            string typStr = WebhookPayloadType.TransactionUpdated.ToString();
            
            transactionUpdated.Event = WebhookEventTypeEnumExtension.ToEnum(WebhookPayloadType.TransactionUpdated.ToString());
            WebhookPayload res = new WebhookPayload(typ);
            res.WebhookPayloadWebhookPayloadTransaction = transactionUpdated;
            return res;
        }
        public static WebhookPayload CreateNull() {
            WebhookPayloadType typ = WebhookPayloadType.Null;
            return new WebhookPayload(typ);
        }

        public class WebhookPayloadConverter : JsonConverter
        {

            public override bool CanConvert(System.Type objectType) => objectType == typeof(WebhookPayload);

            public override bool CanRead => true;

            public override object? ReadJson(JsonReader reader, System.Type objectType, object? existingValue, JsonSerializer serializer)
            {
                JObject jo = JObject.Load(reader);
                string discriminator = jo.GetValue("event")?.ToString() ?? throw new ArgumentNullException("Could not find discriminator field.");
                if (discriminator == WebhookPayloadType.TrackUpdated.ToString())
                {
                    WebhookPayloadWebhookPayloadTrack? webhookPayloadWebhookPayloadTrack = ResponseBodyDeserializer.Deserialize<WebhookPayloadWebhookPayloadTrack>(jo.ToString());
                    return CreateTrackUpdated(webhookPayloadWebhookPayloadTrack!);
                }
                if (discriminator == WebhookPayloadType.BatchCreated.ToString())
                {
                    WebhookPayloadWebhookPayloadBatch? webhookPayloadWebhookPayloadBatch = ResponseBodyDeserializer.Deserialize<WebhookPayloadWebhookPayloadBatch>(jo.ToString());
                    return CreateBatchCreated(webhookPayloadWebhookPayloadBatch!);
                }
                if (discriminator == WebhookPayloadType.BatchPurchased.ToString())
                {
                    WebhookPayloadWebhookPayloadBatch? webhookPayloadWebhookPayloadBatch = ResponseBodyDeserializer.Deserialize<WebhookPayloadWebhookPayloadBatch>(jo.ToString());
                    return CreateBatchPurchased(webhookPayloadWebhookPayloadBatch!);
                }
                if (discriminator == WebhookPayloadType.TransactionCreated.ToString())
                {
                    WebhookPayloadWebhookPayloadTransaction? webhookPayloadWebhookPayloadTransaction = ResponseBodyDeserializer.Deserialize<WebhookPayloadWebhookPayloadTransaction>(jo.ToString());
                    return CreateTransactionCreated(webhookPayloadWebhookPayloadTransaction!);
                }
                if (discriminator == WebhookPayloadType.TransactionUpdated.ToString())
                {
                    WebhookPayloadWebhookPayloadTransaction? webhookPayloadWebhookPayloadTransaction = ResponseBodyDeserializer.Deserialize<WebhookPayloadWebhookPayloadTransaction>(jo.ToString());
                    return CreateTransactionUpdated(webhookPayloadWebhookPayloadTransaction!);
                }
                throw new InvalidOperationException("Could not deserialize into any supported types.");
            }

            public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
            {
                if (value == null) {
                    writer.WriteRawValue("null");
                    return;
                }
                WebhookPayload res = (WebhookPayload)value;
                if (WebhookPayloadType.FromString(res.Type).Equals(WebhookPayloadType.Null))
                {
                    writer.WriteRawValue("null");
                    return;
                }
                if (res.WebhookPayloadWebhookPayloadTrack != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.WebhookPayloadWebhookPayloadTrack));
                    return;
                }
                if (res.WebhookPayloadWebhookPayloadBatch != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.WebhookPayloadWebhookPayloadBatch));
                    return;
                }
                if (res.WebhookPayloadWebhookPayloadTransaction != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.WebhookPayloadWebhookPayloadTransaction));
                    return;
                }

            }
        }

    }

}