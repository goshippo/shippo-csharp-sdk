//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Shippo.Models.Components
{
    using Newtonsoft.Json.Linq;
    using Newtonsoft.Json;
    using Shippo.Models.Components;
    using Shippo.Utils;
    using System.Numerics;
    using System;
    

    public class AddressFromType
    {
        private AddressFromType(string value) { Value = value; }

        public string Value { get; private set; }
        public static AddressFromType AddressCreateRequest { get { return new AddressFromType("AddressCreateRequest"); } }
        
        public static AddressFromType Str { get { return new AddressFromType("str"); } }
        
        public static AddressFromType Null { get { return new AddressFromType("null"); } }

        public override string ToString() { return Value; }
        public static implicit operator String(AddressFromType v) { return v.Value; }
        public static AddressFromType FromString(string v) {
            switch(v) {
                case "AddressCreateRequest": return AddressCreateRequest;
                case "str": return Str;
                case "null": return Null;
                default: throw new ArgumentException("Invalid value for AddressFromType");
            }
        }
        public override bool Equals(object? obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            return Value.Equals(((AddressFromType)obj).Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
    }
    

    [JsonConverter(typeof(AddressFrom.AddressFromConverter))]
    public class AddressFrom {
        public AddressFrom(AddressFromType type) {
            Type = type;
        }
        public AddressCreateRequest? AddressCreateRequest { get; set; } 
        public string? Str { get; set; } 

        public AddressFromType Type { get; set; }


        public static AddressFrom CreateAddressCreateRequest(AddressCreateRequest addressCreateRequest) {
            AddressFromType typ = AddressFromType.AddressCreateRequest;

            AddressFrom res = new AddressFrom(typ);
            res.AddressCreateRequest = addressCreateRequest;
            return res;
        }

        public static AddressFrom CreateStr(string str) {
            AddressFromType typ = AddressFromType.Str;

            AddressFrom res = new AddressFrom(typ);
            res.Str = str;
            return res;
        }

        public static AddressFrom CreateNull() {
            AddressFromType typ = AddressFromType.Null;
            return new AddressFrom(typ);
        }

        public class AddressFromConverter : JsonConverter
        {

            public override bool CanConvert(System.Type objectType) => objectType == typeof(AddressFrom);

            public override bool CanRead => true;

            public override object? ReadJson(JsonReader reader, System.Type objectType, object? existingValue, JsonSerializer serializer)
            { 
                var json = JRaw.Create(reader).ToString();

                if (json == "null") {
                    return null;
                }
                try
                {
                    AddressCreateRequest? addressCreateRequest = ResponseBodyDeserializer.Deserialize<AddressCreateRequest>(json, missingMemberHandling: MissingMemberHandling.Error);
                    return new AddressFrom(AddressFromType.AddressCreateRequest) {
                        AddressCreateRequest = addressCreateRequest
                    };
                }
                catch (Exception ex)
                {
                    if (!(ex is Newtonsoft.Json.JsonReaderException || ex is Newtonsoft.Json.JsonSerializationException)) {
                        throw ex;
                    }
                }
                if (json[0] == '"' && json[^1] == '"'){
                    return new AddressFrom(AddressFromType.Str) {
                        Str = json[1..^1]
                    };
                }

                throw new InvalidOperationException("Could not deserialize into any supported types.");
            }

            public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
            {
                if (value == null) {
                    writer.WriteRawValue("null");
                    return;
                }
                AddressFrom res = (AddressFrom)value;
                if (AddressFromType.FromString(res.Type).Equals(AddressFromType.Null))
                {
                    writer.WriteRawValue("null");
                    return;
                }
                if (res.AddressCreateRequest != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.AddressCreateRequest));
                    return;
                }
                if (res.Str != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.Str));
                    return;
                }

            }
        }

    }

}