//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Shippo.Models.Components
{
    using Newtonsoft.Json.Linq;
    using Newtonsoft.Json;
    using Shippo.Models.Components;
    using Shippo.Utils;
    using System.Collections.Generic;
    using System.Numerics;
    using System.Reflection;
    using System;
    

    public class TransactionRateType
    {
        private TransactionRateType(string value) { Value = value; }

        public string Value { get; private set; }
        public static TransactionRateType CoreRate { get { return new TransactionRateType("CoreRate"); } }
        
        public static TransactionRateType Str { get { return new TransactionRateType("str"); } }
        
        public static TransactionRateType Null { get { return new TransactionRateType("null"); } }

        public override string ToString() { return Value; }
        public static implicit operator String(TransactionRateType v) { return v.Value; }
        public static TransactionRateType FromString(string v) {
            switch(v) {
                case "CoreRate": return CoreRate;
                case "str": return Str;
                case "null": return Null;
                default: throw new ArgumentException("Invalid value for TransactionRateType");
            }
        }
        public override bool Equals(object? obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            return Value.Equals(((TransactionRateType)obj).Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
    }
    
/// <summary>
/// ID of the Rate object for which a Label has to be obtained.  <br/>
/// 
/// <remarks>
/// If you purchase a label by calling the transaction endpoint without a rate (instalabel), <br/>
/// this field will be a simplified Rate object in the Transaction model returned from the POST request.<br/>
/// &lt;/br&gt;Note, only rates less than 7 days old can be purchased to ensure up-to-date pricing.
/// </remarks>
/// </summary>
    [JsonConverter(typeof(TransactionRate.TransactionRateConverter))]
    public class TransactionRate {
        public TransactionRate(TransactionRateType type) {
            Type = type;
        }
        public CoreRate? CoreRate { get; set; } 
        public string? Str { get; set; } 

        public TransactionRateType Type { get; set; }


        public static TransactionRate CreateCoreRate(CoreRate coreRate) {
            TransactionRateType typ = TransactionRateType.CoreRate;

            TransactionRate res = new TransactionRate(typ);
            res.CoreRate = coreRate;
            return res;
        }

        public static TransactionRate CreateStr(string str) {
            TransactionRateType typ = TransactionRateType.Str;

            TransactionRate res = new TransactionRate(typ);
            res.Str = str;
            return res;
        }

        public static TransactionRate CreateNull() {
            TransactionRateType typ = TransactionRateType.Null;
            return new TransactionRate(typ);
        }

        public class TransactionRateConverter : JsonConverter
        {

            public override bool CanConvert(System.Type objectType) => objectType == typeof(TransactionRate);

            public override bool CanRead => true;

            public override object? ReadJson(JsonReader reader, System.Type objectType, object? existingValue, JsonSerializer serializer)
            {
                var json = JRaw.Create(reader).ToString();
                if (json == "null")
                {
                    return null;
                }

                var fallbackCandidates = new List<(System.Type, object, string)>();
                try
                {
                    return new TransactionRate(TransactionRateType.CoreRate)
                    {
                        CoreRate = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<CoreRate>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(CoreRate), new TransactionRate(TransactionRateType.CoreRate), "CoreRate"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }
            
                if (json[0] == '"' && json[^1] == '"'){
                    return new TransactionRate(TransactionRateType.Str)
                    {
                        Str = json[1..^1]
                    };
                }
            
                if (fallbackCandidates.Count > 0)
                {
                    fallbackCandidates.Sort((a, b) => ResponseBodyDeserializer.CompareFallbackCandidates(a.Item1, b.Item1, json));
                    foreach(var (deserializationType, returnObject, propertyName) in fallbackCandidates)
                    {
                        try
                        {
                            return ResponseBodyDeserializer.DeserializeUndiscriminatedUnionFallback(deserializationType, returnObject, propertyName, json);
                        }
                        catch (ResponseBodyDeserializer.DeserializationException)
                        {
                            // try next fallback option
                        }
                        catch (Exception)
                        {
                            throw;
                        }
                    }
                }

          
                throw new InvalidOperationException("Could not deserialize into any supported types.");
            }

            public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
            {
                if (value == null) {
                    writer.WriteRawValue("null");
                    return;
                }
                TransactionRate res = (TransactionRate)value;
                if (TransactionRateType.FromString(res.Type).Equals(TransactionRateType.Null))
                {
                    writer.WriteRawValue("null");
                    return;
                }
                if (res.CoreRate != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.CoreRate));
                    return;
                }
                if (res.Str != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.Str));
                    return;
                }

            }
        }

    }

}