//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Shippo.Models.Components
{
    using Newtonsoft.Json;
    using Shippo.Utils;
    using System;
    
    /// <summary>
    /// B13A Option details are obtained by filing a B13A Canada Export Declaration via the Canadian Export Reporting System (CERS). <br/>
    /// 
    /// <remarks>
    /// &lt;a href=&quot;https://www.cbsa-asfc.gc.ca/services/export/guide-eng.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt; More information on reporting commercial exports from Canada. &lt;/a&gt;<br/>
    /// Allowed values available &lt;a href=&quot;#tag/Customs-Declaration-B13A-Filing-Option&quot;&gt;here&lt;/a&gt;
    /// </remarks>
    /// </summary>
    public enum CustomsDeclarationB13AFilingOptionEnum
    {
        [JsonProperty("FILED_ELECTRONICALLY")]
        FiledElectronically,
        [JsonProperty("SUMMARY_REPORTING")]
        SummaryReporting,
        [JsonProperty("NOT_REQUIRED")]
        NotRequired,
    }

    public static class CustomsDeclarationB13AFilingOptionEnumExtension
    {
        public static string Value(this CustomsDeclarationB13AFilingOptionEnum value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static CustomsDeclarationB13AFilingOptionEnum ToEnum(this string value)
        {
            foreach(var field in typeof(CustomsDeclarationB13AFilingOptionEnum).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is CustomsDeclarationB13AFilingOptionEnum)
                    {
                        return (CustomsDeclarationB13AFilingOptionEnum)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum CustomsDeclarationB13AFilingOptionEnum");
        }
    }

}