//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Shippo.Models.Components
{
    using Newtonsoft.Json.Linq;
    using Newtonsoft.Json;
    using Shippo.Models.Components;
    using Shippo.Utils;
    using System.Numerics;
    using System;
    

    public class UserParcelTemplateCreateRequestType
    {
        private UserParcelTemplateCreateRequestType(string value) { Value = value; }

        public string Value { get; private set; }
        public static UserParcelTemplateCreateRequestType UserParcelTemplateWithCarrierTemplateCreateRequest { get { return new UserParcelTemplateCreateRequestType("UserParcelTemplateWithCarrierTemplateCreateRequest"); } }
        
        public static UserParcelTemplateCreateRequestType UserParcelTemplateWithoutCarrierTemplateCreateRequest { get { return new UserParcelTemplateCreateRequestType("UserParcelTemplateWithoutCarrierTemplateCreateRequest"); } }
        
        public static UserParcelTemplateCreateRequestType Null { get { return new UserParcelTemplateCreateRequestType("null"); } }

        public override string ToString() { return Value; }
        public static implicit operator String(UserParcelTemplateCreateRequestType v) { return v.Value; }
        public static UserParcelTemplateCreateRequestType FromString(string v) {
            switch(v) {
                case "UserParcelTemplateWithCarrierTemplateCreateRequest": return UserParcelTemplateWithCarrierTemplateCreateRequest;
                case "UserParcelTemplateWithoutCarrierTemplateCreateRequest": return UserParcelTemplateWithoutCarrierTemplateCreateRequest;
                case "null": return Null;
                default: throw new ArgumentException("Invalid value for UserParcelTemplateCreateRequestType");
            }
        }
        public override bool Equals(object? obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            return Value.Equals(((UserParcelTemplateCreateRequestType)obj).Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
    }
    

    [JsonConverter(typeof(UserParcelTemplateCreateRequest.UserParcelTemplateCreateRequestConverter))]
    public class UserParcelTemplateCreateRequest {
        public UserParcelTemplateCreateRequest(UserParcelTemplateCreateRequestType type) {
            Type = type;
        }
        public UserParcelTemplateWithCarrierTemplateCreateRequest? UserParcelTemplateWithCarrierTemplateCreateRequest { get; set; } 
        public UserParcelTemplateWithoutCarrierTemplateCreateRequest? UserParcelTemplateWithoutCarrierTemplateCreateRequest { get; set; } 

        public UserParcelTemplateCreateRequestType Type { get; set; }


        public static UserParcelTemplateCreateRequest CreateUserParcelTemplateWithCarrierTemplateCreateRequest(UserParcelTemplateWithCarrierTemplateCreateRequest userParcelTemplateWithCarrierTemplateCreateRequest) {
            UserParcelTemplateCreateRequestType typ = UserParcelTemplateCreateRequestType.UserParcelTemplateWithCarrierTemplateCreateRequest;

            UserParcelTemplateCreateRequest res = new UserParcelTemplateCreateRequest(typ);
            res.UserParcelTemplateWithCarrierTemplateCreateRequest = userParcelTemplateWithCarrierTemplateCreateRequest;
            return res;
        }

        public static UserParcelTemplateCreateRequest CreateUserParcelTemplateWithoutCarrierTemplateCreateRequest(UserParcelTemplateWithoutCarrierTemplateCreateRequest userParcelTemplateWithoutCarrierTemplateCreateRequest) {
            UserParcelTemplateCreateRequestType typ = UserParcelTemplateCreateRequestType.UserParcelTemplateWithoutCarrierTemplateCreateRequest;

            UserParcelTemplateCreateRequest res = new UserParcelTemplateCreateRequest(typ);
            res.UserParcelTemplateWithoutCarrierTemplateCreateRequest = userParcelTemplateWithoutCarrierTemplateCreateRequest;
            return res;
        }

        public static UserParcelTemplateCreateRequest CreateNull() {
            UserParcelTemplateCreateRequestType typ = UserParcelTemplateCreateRequestType.Null;
            return new UserParcelTemplateCreateRequest(typ);
        }

        public class UserParcelTemplateCreateRequestConverter : JsonConverter
        {

            public override bool CanConvert(System.Type objectType) => objectType == typeof(UserParcelTemplateCreateRequest);

            public override bool CanRead => true;

            public override object? ReadJson(JsonReader reader, System.Type objectType, object? existingValue, JsonSerializer serializer)
            { 
                var json = JRaw.Create(reader).ToString();

                if (json == "null") {
                    return null;
                }
                try
                {
                    UserParcelTemplateWithCarrierTemplateCreateRequest? userParcelTemplateWithCarrierTemplateCreateRequest = ResponseBodyDeserializer.Deserialize<UserParcelTemplateWithCarrierTemplateCreateRequest>(json, missingMemberHandling: MissingMemberHandling.Error);
                    return new UserParcelTemplateCreateRequest(UserParcelTemplateCreateRequestType.UserParcelTemplateWithCarrierTemplateCreateRequest) {
                        UserParcelTemplateWithCarrierTemplateCreateRequest = userParcelTemplateWithCarrierTemplateCreateRequest
                    };
                }
                catch (Exception ex)
                {
                    if (!(ex is Newtonsoft.Json.JsonReaderException || ex is Newtonsoft.Json.JsonSerializationException)) {
                        throw ex;
                    }
                }
                try
                {
                    UserParcelTemplateWithoutCarrierTemplateCreateRequest? userParcelTemplateWithoutCarrierTemplateCreateRequest = ResponseBodyDeserializer.Deserialize<UserParcelTemplateWithoutCarrierTemplateCreateRequest>(json, missingMemberHandling: MissingMemberHandling.Error);
                    return new UserParcelTemplateCreateRequest(UserParcelTemplateCreateRequestType.UserParcelTemplateWithoutCarrierTemplateCreateRequest) {
                        UserParcelTemplateWithoutCarrierTemplateCreateRequest = userParcelTemplateWithoutCarrierTemplateCreateRequest
                    };
                }
                catch (Exception ex)
                {
                    if (!(ex is Newtonsoft.Json.JsonReaderException || ex is Newtonsoft.Json.JsonSerializationException)) {
                        throw ex;
                    }
                }

                throw new InvalidOperationException("Could not deserialize into any supported types.");
            }

            public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
            {
                if (value == null) {
                    writer.WriteRawValue("null");
                    return;
                }
                UserParcelTemplateCreateRequest res = (UserParcelTemplateCreateRequest)value;
                if (UserParcelTemplateCreateRequestType.FromString(res.Type).Equals(UserParcelTemplateCreateRequestType.Null))
                {
                    writer.WriteRawValue("null");
                    return;
                }
                if (res.UserParcelTemplateWithCarrierTemplateCreateRequest != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.UserParcelTemplateWithCarrierTemplateCreateRequest));
                    return;
                }
                if (res.UserParcelTemplateWithoutCarrierTemplateCreateRequest != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.UserParcelTemplateWithoutCarrierTemplateCreateRequest));
                    return;
                }

            }
        }

    }

}