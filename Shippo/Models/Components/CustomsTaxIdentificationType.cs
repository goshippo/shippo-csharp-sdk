//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Shippo.Models.Components
{
    using Newtonsoft.Json;
    using Shippo.Utils;
    using System;
    
    /// <summary>
    /// Type of tax identification.<br/>
    /// 
    /// <remarks>
    /// * `EIN` - Employer Identification Number, also known as a Federal Tax Identification Number.<br/>
    /// * `VAT` - Value Added Tax identification number.<br/>
    /// * `IOSS` - Import One-Stop Shop<br/>
    /// * `ARN` - Australian Taxation Office Reference Number
    /// </remarks>
    /// </summary>
    public enum CustomsTaxIdentificationType
    {
        [JsonProperty("EIN")]
        Ein,
        [JsonProperty("VAT")]
        Vat,
        [JsonProperty("IOSS")]
        Ioss,
        [JsonProperty("ARN")]
        Arn,
    }

    public static class CustomsTaxIdentificationTypeExtension
    {
        public static string Value(this CustomsTaxIdentificationType value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static CustomsTaxIdentificationType ToEnum(this string value)
        {
            foreach(var field in typeof(CustomsTaxIdentificationType).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is CustomsTaxIdentificationType)
                    {
                        return (CustomsTaxIdentificationType)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum CustomsTaxIdentificationType");
        }
    }

}