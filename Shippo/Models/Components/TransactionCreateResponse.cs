//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Shippo.Models.Components
{
    using Newtonsoft.Json.Linq;
    using Newtonsoft.Json;
    using Shippo.Models.Components;
    using Shippo.Utils;
    using System.Numerics;
    using System;
    

    public class TransactionCreateResponseType
    {
        private TransactionCreateResponseType(string value) { Value = value; }

        public string Value { get; private set; }
        public static TransactionCreateResponseType Transaction { get { return new TransactionCreateResponseType("Transaction"); } }
        
        public static TransactionCreateResponseType InstantTransactionCreateResponse { get { return new TransactionCreateResponseType("InstantTransactionCreateResponse"); } }
        
        public static TransactionCreateResponseType Null { get { return new TransactionCreateResponseType("null"); } }

        public override string ToString() { return Value; }
        public static implicit operator String(TransactionCreateResponseType v) { return v.Value; }
        public static TransactionCreateResponseType FromString(string v) {
            switch(v) {
                case "Transaction": return Transaction;
                case "InstantTransactionCreateResponse": return InstantTransactionCreateResponse;
                case "null": return Null;
                default: throw new ArgumentException("Invalid value for TransactionCreateResponseType");
            }
        }
        public override bool Equals(object? obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            return Value.Equals(((TransactionCreateResponseType)obj).Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
    }
    

    [JsonConverter(typeof(TransactionCreateResponse.TransactionCreateResponseConverter))]
    public class TransactionCreateResponse {
        public TransactionCreateResponse(TransactionCreateResponseType type) {
            Type = type;
        }
        public Transaction? Transaction { get; set; } 
        public InstantTransactionCreateResponse? InstantTransactionCreateResponse { get; set; } 

        public TransactionCreateResponseType Type { get; set; }


        public static TransactionCreateResponse CreateTransaction(Transaction transaction) {
            TransactionCreateResponseType typ = TransactionCreateResponseType.Transaction;

            TransactionCreateResponse res = new TransactionCreateResponse(typ);
            res.Transaction = transaction;
            return res;
        }

        public static TransactionCreateResponse CreateInstantTransactionCreateResponse(InstantTransactionCreateResponse instantTransactionCreateResponse) {
            TransactionCreateResponseType typ = TransactionCreateResponseType.InstantTransactionCreateResponse;

            TransactionCreateResponse res = new TransactionCreateResponse(typ);
            res.InstantTransactionCreateResponse = instantTransactionCreateResponse;
            return res;
        }

        public static TransactionCreateResponse CreateNull() {
            TransactionCreateResponseType typ = TransactionCreateResponseType.Null;
            return new TransactionCreateResponse(typ);
        }

        public class TransactionCreateResponseConverter : JsonConverter
        {

            public override bool CanConvert(System.Type objectType) => objectType == typeof(TransactionCreateResponse);

            public override bool CanRead => true;

            public override object? ReadJson(JsonReader reader, System.Type objectType, object? existingValue, JsonSerializer serializer)
            { 
                var json = JRaw.Create(reader).ToString();

                if (json == "null") {
                    return null;
                }
                try
                {
                    Transaction? transaction = ResponseBodyDeserializer.Deserialize<Transaction>(json, missingMemberHandling: MissingMemberHandling.Error);
                    return new TransactionCreateResponse(TransactionCreateResponseType.Transaction) {
                        Transaction = transaction
                    };
                }
                catch (Exception ex)
                {
                    if (!(ex is Newtonsoft.Json.JsonReaderException || ex is Newtonsoft.Json.JsonSerializationException)) {
                        throw ex;
                    }
                }
                try
                {
                    InstantTransactionCreateResponse? instantTransactionCreateResponse = ResponseBodyDeserializer.Deserialize<InstantTransactionCreateResponse>(json, missingMemberHandling: MissingMemberHandling.Error);
                    return new TransactionCreateResponse(TransactionCreateResponseType.InstantTransactionCreateResponse) {
                        InstantTransactionCreateResponse = instantTransactionCreateResponse
                    };
                }
                catch (Exception ex)
                {
                    if (!(ex is Newtonsoft.Json.JsonReaderException || ex is Newtonsoft.Json.JsonSerializationException)) {
                        throw ex;
                    }
                }

                throw new InvalidOperationException("Could not deserialize into any supported types.");
            }

            public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
            {
                if (value == null) {
                    writer.WriteRawValue("null");
                    return;
                }
                TransactionCreateResponse res = (TransactionCreateResponse)value;
                if (TransactionCreateResponseType.FromString(res.Type).Equals(TransactionCreateResponseType.Null))
                {
                    writer.WriteRawValue("null");
                    return;
                }
                if (res.Transaction != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.Transaction));
                    return;
                }
                if (res.InstantTransactionCreateResponse != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.InstantTransactionCreateResponse));
                    return;
                }

            }
        }

    }

}